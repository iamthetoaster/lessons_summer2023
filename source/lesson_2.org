#+TITLE: Lesson 2: Collections
#+PROPERTY: header-args :results raw verbatim output :post output_drawer(data=*this*) :noweb strip-export

#+NAME: output_drawer
#+BEGIN_SRC shell :var data="" :exports none :results silent :results output :post
echo ':results:'
echo '#+HTML: <details>'
echo '#+HTML: <summary>Output</summary>'
echo '#+BEGIN_SRC'
echo -n "$data"
echo '#+END_SRC'
echo '#+HTML: </details>'
echo ':end:'
#+END_SRC

#+NAME: session_output_drawer
#+BEGIN_SRC shell :var data="" :exports none :results silent :results output :post
echo ':results:'
echo '#+HTML: <details>'
echo '#+HTML: <summary>Output</summary>'
echo '#+BEGIN_SRC'
echo "$data"
echo '#+END_SRC'
echo '#+HTML: </details>'
echo ':end:'
#+END_SRC

So far we've mostly talked about simple types that represent a single object. Sometimes we want to represent an object which contains several other objects. There are many container types. We'll go over some of the important ones here.

* Lists
A list is an ordered collection, where items are accessed by their position in the list. In Python, we can create a list using square brackets, wrapped around a comma separated list of expressions. These expressions will be evaluated and placed in the list.

#+BEGIN_SRC python :exports both
# `chr` function converts an ascii code to a character
grades = [chr(65), "B", "C", "D", "F"]

print(grades)
#+END_SRC

#+RESULTS:
:results:
#+HTML: <details>
#+HTML: <summary>Output</summary>
#+BEGIN_SRC
['A', 'B', 'C', 'D', 'F']
#+END_SRC
#+HTML: </details>
:end:

One can also access elements of a list using square brackets. To do this, name the list, then put an expression that evaluates to the index of the element of the list that you wish to access inside some square brackets to the right of the list name.

#+BEGIN_SRC python :exports both
grades = ["A", "B", "C", "D", "F"]

print("The first grade in the list is: " + grades[0])
#+END_SRC

#+RESULTS:
:results:
#+HTML: <details>
#+HTML: <summary>Output</summary>
#+BEGIN_SRC
The first grade in the list is: A
#+END_SRC
#+HTML: </details>
:end:
Notice that index 0 refers to the first element of the list. In a programming context, 0 is usually considered the first number. In many contexts, this "zero indexing" is actually useful, and allows one to write neater code. Sometimes, however, you will forget that lists start with index 0, and this will result in a bug - everyone does it. If you make a mistake while writing code, it is likely a mistake everyone who has written code for a comparable amount of time has made. If everyone has made that mistake, it doesn't make you stupid to commit it. On the other hand, if you make a mistake no one else has ever made, you are probably a genius and should be given a medal.

** Iterating Through Lists
Consider the following snippet:

#+BEGIN_SRC python :exports both
grades = ["A", "B", "C", "D", "F"]
# Indices: 0,   1,   2,   3,   4
# Note that there are 5 elements in the list

print("The possible grades in a standard US classroom are:")

current_index = 0

# The `len` function takes a list, and returns the number of items in said list
while current_index < len(grades):
    # We only want commas before every item but the first
    if current_index > 0:
        # Adding `end=""` to the arguments of a print statement stops it printing a newline after whatever you print.
        print(", ", end="")
    print(grades[current_index], end="")

    current_index = current_index + 1
print("!")
#+END_SRC

#+RESULTS:
:results:
#+HTML: <details>
#+HTML: <summary>Output</summary>
#+BEGIN_SRC
The possible grades in a standard US classroom are:
A, B, C, D, F!
#+END_SRC
#+HTML: </details>
:end:

Zero indexing allows us to use the ~<~ operator with the length of the list to make sure that a value is a valid index.

We often find ourselves going through every item in a list like the above. As fun as writing that little counter was, in general, writing less code is better, so Python provides a shortcut:

#+BEGIN_SRC python :exports both
grades = ["A", "B", "C", "D", "F"]
# Indices: 0,   1,   2,   3,   4
# Note that there are 5 elements in the list

print("The possible grades in a standard US classroom are:")

for grade in grades:
    if grade != "A":
        # Adding `end=""` to the arguments of a print statement stops it printing a newline after whatever you print.
        print(", ", end="")
    print(grade, end="")
print("!")
#+END_SRC

#+RESULTS:
:results:
#+HTML: <details>
#+HTML: <summary>Output</summary>
#+BEGIN_SRC
The possible grades in a standard US classroom are:
A, B, C, D, F!
#+END_SRC
#+HTML: </details>
:end:

A for loop is a statement that can be used to replace while loops when you want to iterate through each value in a collection. A for loop has the ~for~ keyword, a name used to refer to the items in the collection, the ~in~ keyword, a collection expression, a colon, and a code block. For each item in the collection, the name is assigned to that item's value, and the code block is run. The name used to refer to the collection items can be used within the code block. For loops are also called "for each" loops - reading the ~for~ keyword as "for each" may make more sense to you. Look at the code above again and give it a try!

** Useful List Operations
We can also use the ~in~ keyword as a question. For example:

#+BEGIN_SRC python :exports both
student_grade = "B"
# ... later ...
passing_grades = ["A", "B", "C"]
if student_grade in passing_grades:
    print("Pass!")
else:
    print("Alas...")
#+END_SRC

#+RESULTS:
:results:
#+HTML: <details>
#+HTML: <summary>Output</summary>
#+BEGIN_SRC
Pass!
#+END_SRC
#+HTML: </details>
:end:

~in~ is being used as an operator that returns as a boolean whether the operand on the right is an item of the operand on the left.

If there's something we think we should be able to turn into a list, we can try it using the ~list~ function. For example:

#+BEGIN_SRC python :exports both
digits = range(10)
# The range function creates a "generator"
# In this case the generator will generate numbers starting with zero, counting up to ten, ignoring ten itself
# Zero indexing again - note how that makes ten numbers!
# We'll talk more about generators later
list_of_digits = list(digits)
print(list_of_digits)
#+END_SRC

#+RESULTS:
:results:
#+HTML: <details>
#+HTML: <summary>Output</summary>
#+BEGIN_SRC
[0, 1, 2, 3, 4, 5, 6, 7, 8, 9]
#+END_SRC
#+HTML: </details>
:end:

Let's say we want to change a list. We can do that! Probably the most useful thing we can do to a list is to add something to it, using the ~.append(item)~ operation, like so:

#+BEGIN_SRC python :exports both
grades = [] # an empty list!

# Alright, this gets a bit dense
# We're iterating through each number below 6, starting at zero
for i in list(range(6)):
    # For each number, add 65 to it ...
    # Convert the resulting number to a character code ...
    # Then add the resulting character to our list of grades
    grades.append(chr(65 + i))

print(grades)
#+END_SRC

#+RESULTS:
:results:
#+HTML: <details>
#+HTML: <summary>Output</summary>
#+BEGIN_SRC
['A', 'B', 'C', 'D', 'E', 'F']
#+END_SRC
#+HTML: </details>
:end:

Now hold on - that list shouldn't have ~'E'~ in it. Now we need to remove an item. We can do that with ~.remove(item)~

#+BEGIN_SRC python :exports both
# Mostly the same ...
grades = []

for i in list(range(6)):
    grades.append(chr(65 + i))

# But here's the twist:
grades.remove("E")
print(grades)
#+END_SRC

#+RESULTS:
:results:
#+HTML: <details>
#+HTML: <summary>Output</summary>
#+BEGIN_SRC
['A', 'B', 'C', 'D', 'F']
#+END_SRC
#+HTML: </details>
:end:

That's better! Now let's say we're writing this code for multiple schools. One of those schools has some educational philosophy that doesn't believe in failure. As a result, they would like to remove the lowest grade, F, from the list of possible grades. We can do that with ~.pop()~, like so:

#+BEGIN_SRC python :exports both
failure_is_not_an_option = True
# ...
# Still mostly the same ...
grades = []

for i in list(range(6)):
    grades.append(chr(65 + i))

grades.remove("E")

# But now, the twist is over here:
if failure_is_not_an_option:
    grades.pop()

print(grades)
#+END_SRC

#+RESULTS:
:results:
#+HTML: <details>
#+HTML: <summary>Output</summary>
#+BEGIN_SRC
['A', 'B', 'C', 'D']
#+END_SRC
#+HTML: </details>
:end:

Lovely. Now we're taking on another client! This school has a different philosophy. They believe that students will work harder if they don't get As, so it's best to just not let them. We can use ~.pop(index)~ to remove an item at a particular index of a list:

#+BEGIN_SRC python :exports both
failure_is_not_an_option = False
success_is_not_an_option = True
# ...
# Still mostly the same ...
grades = []

for i in list(range(6)):
    grades.append(chr(65 + i))

grades.remove("E")

# But now, the twist is over here:
if failure_is_not_an_option:
    grades.pop()
if success_is_not_an_option:
    grades.pop(0) # Zero indexing! The "zeroth" element is the first

print(grades)
#+END_SRC

#+RESULTS:
:results:
#+HTML: <details>
#+HTML: <summary>Output</summary>
#+BEGIN_SRC
['B', 'C', 'D', 'F']
#+END_SRC
#+HTML: </details>
:end:

Actually, I'd rather not work for these people. Time to move on.

* Strings
If you think about it, a string is just a collection of letters! And python has thought about it. Strings are ordered and indexable in the same way lists are:

#+BEGIN_SRC python :exports both
message = "Hello, world!"

print("Message: ", message)

print("First letter: ", message[0])

for letter in message:
    print(letter, end=" ")
print()
#+END_SRC

#+RESULTS:
:results:
#+HTML: <details>
#+HTML: <summary>Output</summary>
#+BEGIN_SRC
Message:  Hello, world!
First letter:  H
H e l l o ,   w o r l d !
#+END_SRC
#+HTML: </details>
:end:

You cannot, however, edit a string by assigning things to elements of it:

#+BEGIN_SRC python
word = "cat"
word[2] = "r"
# TypeError: 'str' object does not support item assignment
#+END_SRC

#+RESULTS:
:results:
#+HTML: <details>
#+HTML: <summary>Output</summary>
#+BEGIN_SRC
#+END_SRC
#+HTML: </details>
:end:

You can also use the ~in~ keyword on strings, which will check whether a string on the left is a substring of the string on the right:

#+BEGIN_SRC python :exports both
if "gator" in "purgatory":
    print("You can't spell purgatory without gator")
else:
    print("You can spell purgatory without gator")
#+END_SRC

#+RESULTS:
:results:
#+HTML: <details>
#+HTML: <summary>Output</summary>
#+BEGIN_SRC
You can't spell purgatory without gator
#+END_SRC
#+HTML: </details>
:end:

We can create a string by putting letters between a pair of double quotes, or single quotes. It doesn't matter, except you can use double quotes inside single quoted strings, and single quotes inside double quoted strings.

#+BEGIN_SRC python
string_1 = 'This is a string!'
string_2 = "This is another string!"
#+END_SRC

Python programmers tend to prefer using single quotes, because you don't have to press the shift key. I personally tend to prefer to use double quotes, as Python is not my only language, and double quotes are used in most languages.

You can combine strings, and some things that can be turned into strings, using the ~+~ operator. This is called "concatenation." It adds the strings back to back:

#+BEGIN_SRC python :exports both
predicate = "Greet"
grammatical_object = "world"

print(predicate + " " + grammatical_object + ".")
#+END_SRC

#+RESULTS:
:results:
#+HTML: <details>
#+HTML: <summary>Output</summary>
#+BEGIN_SRC
Greet world.
#+END_SRC
#+HTML: </details>
:end:

Note that this creates a new string, and does not modify the old string! Similar to how 1 + 1 = 2, but that didn't change the first 1.

You can also create strings using format strings, or fstrings for short. An fstring is formed by placing the letter f before the quotation marks that make up the string. Inside of an fstring, you can place a python expression inside of curly braces, and it will render that expression as part of the string. In general, I prefer using this functionality over the plus sign.

#+BEGIN_SRC python :exports both
first_number = 0
second_number = 1

print(f"The first number is: {first_number}. The second number is: {second_number}. Their product is: {first_number * second_number}.")
#+END_SRC

#+RESULTS:
:results:
#+HTML: <details>
#+HTML: <summary>Output</summary>
#+BEGIN_SRC
The first number is: 0. The second number is: 1. Their product is: 0.
#+END_SRC
#+HTML: </details>
:end:

* Generators
A list is an ordered collection where each element in it already exists. Since each element already exists, you can look for the fifth element, or the seventh, or the last one. A generator is different. Generators are kind of like a magic hat that doesn't have anything in it until you stick your arm in and pull somthing out of it.

Why is that useful, you ask? Can't we just make a list instead, already populated with all the items we want in it? We can do more with a list, after all.

Good question! While it is possible to make a list, and fill in each item in the list before we need them - what's known as eager evaluation - those items have to take up space. Furthermore, it takes time to build the whole list. When we use generators, we can a) not fill memory with things we don't actually need yet, and b) spread out the time it takes to generate a bunch of stuff across the time we're using it.

Let's look at a place we might use generators:

#+BEGIN_SRC python :exports both
for i in range(4):
    for j in range(4):
        print("na", end="")
    print(",")

print("Die Fledermaus!")
#+END_SRC

#+RESULTS:
:results:
#+HTML: <details>
#+HTML: <summary>Output</summary>
#+BEGIN_SRC
nananana,
nananana,
nananana,
nananana,
Die Fledermaus!
#+END_SRC
#+HTML: </details>
:end:

We used code similar to this earlier, but converted our generator to a list. This way is both better to look at and better for the computer!

Many functions, such as ~range~ exist to create generators. We usually don't need to, but if we want, we can make our own generators, using the ~yield~ keyword. This next example will also demonstrate the usefulness of not filling memory with things we don't need yet! Observe:

#+BEGIN_SRC python :exports both
def natural_numbers():
    counter = 1
    while True:
        yield counter
        counter = counter + 1

for n in natural_numbers():
    print(f"{n}, {n} iterations! Ha ha ha!")
    if n > 10:
        # If you find yourself in an infinite loop, try clicking the terminal and pressing Ctrl+c
        print("That's quite enough of that.")
        break
#+END_SRC

#+RESULTS:
:results:
#+HTML: <details>
#+HTML: <summary>Output</summary>
#+BEGIN_SRC
1, 1 iterations! Ha ha ha!
2, 2 iterations! Ha ha ha!
3, 3 iterations! Ha ha ha!
4, 4 iterations! Ha ha ha!
5, 5 iterations! Ha ha ha!
6, 6 iterations! Ha ha ha!
7, 7 iterations! Ha ha ha!
8, 8 iterations! Ha ha ha!
9, 9 iterations! Ha ha ha!
10, 10 iterations! Ha ha ha!
11, 11 iterations! Ha ha ha!
That's quite enough of that.
#+END_SRC
#+HTML: </details>
:end:

Rendering that generator out to a list would prove problematic, as it has more items than our computer's memory can handle. Luckily, with generators, we don't have to!

Again, rolling our own generators is usually not necessary, as there are many functions that create generators for us.

* Dictionaries
A dictionary, sometimes called a map, is a collection of keys and values. Each key exists at most once, and has an associated value. Values are accessed by their keys. Keys and values can be any number of types; usually all keys are the same type, and all values are the same type.

You can create a dictionary by wrapping a comma separated list of keys and values, those separated by a colon, in curly braces. You can also just call ~dict()~ to create an empty one.

Dictionaries can also have their keys iterated across. The ~in~ keyword when applied to dictionaries checks whether the left hand operand is a present key.

#+BEGIN_SRC python :exports both
class_names = {
    "ENG5A": "Rhetoric for Lemurs",
    "ENG5B": "Rhetoric about Lemurs",
    "BIO20": "Lemur Anatomy",
    "CS101": "Simulating Lemur Behavior for the Web"
}

for code in class_names:
    print(f"Class code {code} refers to {class_names[code]}")

if "PHYS11" in class_names:
    print(f"PHYS11 refers to {class_names['PHYS11']}")
else:
    print("We do not know what PHYS11 is")
#+END_SRC

#+RESULTS:
:results:
#+HTML: <details>
#+HTML: <summary>Output</summary>
#+BEGIN_SRC
Class code ENG5A refers to Rhetoric for Lemurs
Class code ENG5B refers to Rhetoric about Lemurs
Class code BIO20 refers to Lemur Anatomy
Class code CS101 refers to Simulating Lemur Behavior for the Web
We do not know what PHYS11 is
#+END_SRC
#+HTML: </details>
:end:

You can add items to the dictionary by just assigning to them.

#+BEGIN_SRC python :exports both
prerequisites = dict()
prerequisites["MATH 2"] = "MATH 1"
print(prerequisites)
#+END_SRC

#+RESULTS:
:results:
#+HTML: <details>
#+HTML: <summary>Output</summary>
#+BEGIN_SRC
{'MATH 2': 'MATH 1'}
#+END_SRC
#+HTML: </details>
:end:

Dictionaries are some of the most useful collections you will ever see! We often want to associate data with other data, and dictionaries are a great way to do that.

* Making New Collections Out of Old Collections
** Slices
Well, that was sort of a lie. The first thing we're going to do is not actually make a new collection, just peer at a piece of the old collection - a slice of it! In Python, we can access a subset of the elements of certain collections with colons and brackets. This is called a slice. A slice has up to three parts: a start, an end, and a step size. Here are a couple slices:

#+BEGIN_SRC python :exports both
# Of course we need a list to slice!
digits = list(range(10))

print("All of em:              ", digits)

# Specifying a start and nothing else
print("All but the first:      ", digits[1:])

# Specifying an end and nothing else
print("Under fives:            ", digits[:5])

# Specifying a step size and nothing else
print("Evens:                  ", digits[::2])

# Indices can also be negative, which means you count backwards from the end
print("Without the last:       ", digits[:-1])

# The step size can also be negative!
print("Backwards odds:         ", digits[::-2])

# We can specify both a start and an end
print("Without first or last:  ", digits[1:-1])

# Or any combination of the parts of a slice - including all three!
print("Backwards evens above 2:", digits[-2:2:-2])
#+END_SRC

#+RESULTS:
:results:
#+HTML: <details>
#+HTML: <summary>Output</summary>
#+BEGIN_SRC
All of em:               [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]
All but the first:       [1, 2, 3, 4, 5, 6, 7, 8, 9]
Under fives:             [0, 1, 2, 3, 4]
Evens:                   [0, 2, 4, 6, 8]
Without the last:        [0, 1, 2, 3, 4, 5, 6, 7, 8]
Backwards odds:          [9, 7, 5, 3, 1]
Without first or last:   [1, 2, 3, 4, 5, 6, 7, 8]
Backwards evens above 2: [8, 6, 4]
#+END_SRC
#+HTML: </details>
:end:

Slices don't really create a new collection; they just represent a piece of an already existing collection. This means if you modify a slice, you modify the original collection. For example:

#+BEGIN_SRC python :exports both
digits = list(range(10))

digits[::2] = ["EVEN", "EVEN", "EVEN", "EVEN", "EVEN"]

print(digits)
#+END_SRC

#+RESULTS:
:results:
#+HTML: <details>
#+HTML: <summary>Output</summary>
#+BEGIN_SRC
['EVEN', 1, 'EVEN', 3, 'EVEN', 5, 'EVEN', 7, 'EVEN', 9]
#+END_SRC
#+HTML: </details>
:end:

Slices also work on strings:

#+BEGIN_SRC python :exports both
word = "grape"
print(word)
print(word[2:])
#+END_SRC

#+RESULTS:
:results:
#+HTML: <details>
#+HTML: <summary>Output</summary>
#+BEGIN_SRC
grape
ape
#+END_SRC
#+HTML: </details>
:end:

** Comprehensions
Comprehensions are kind of like Python's version of mathematical set builder notation! Consider the set of odd square numbers:

\begin{equation*}
\{x^2 \mid x \in \mathbb{N}, x \bmod{2} = 1\}
\end{equation*}

We can read this as: the set of x squared, where x is an element of the natural numbers, as long as the remainder of dividing x by two is one. We can write the same thing in Python! Let's go ahead and reuse our natural number generator from before:

#+BEGIN_SRC python :exports both
def natural_numbers():
    counter = 1
    while True:
        yield counter
        counter = counter + 1

odd_squares = (x * x for x in natural_numbers() if x % 2 == 1)

for square in odd_squares:
    print(square)
    if square > 100:
        break

#+END_SRC

#+RESULTS:
:results:
#+HTML: <details>
#+HTML: <summary>Output</summary>
#+BEGIN_SRC
1
9
25
49
81
121
#+END_SRC
#+HTML: </details>
:end:

As you can see, the syntax is a little different, but the idea is fundamentally the same! This is a generator comprehension. We can also make a list comprehension! Just wrap it in brackets instead of parentheses.

#+BEGIN_SRC python :exports both
digits = range(10)

teens = [10 + digit for digit in digits]

print(teens)
#+END_SRC

#+RESULTS:
:results:
#+HTML: <details>
#+HTML: <summary>Output</summary>
#+BEGIN_SRC
[10, 11, 12, 13, 14, 15, 16, 17, 18, 19]
#+END_SRC
#+HTML: </details>
:end:

Comprehensions are another way to use ~for~ and ~in~! A comprehension is an expression which may use a new variable name, the ~for~ keyword, that new variable name, the ~in~ keyword, and the collection that we are creating a modified copy of. For each item in that collection, it sets the variable name to that thing, applies the expression to it, and sets the next item of the resulting collection to that result.

We can also optionally filter items of the collection we're using to seed our new collection, using the ~if~ keyword, and a boolean expression that uses our variable name:

#+BEGIN_SRC python :exports both
digits = list(range(10))

teens = [10 + digit for digit in digits if digit > 2]

print(teens)
#+END_SRC

#+RESULTS:
:results:
#+HTML: <details>
#+HTML: <summary>Output</summary>
#+BEGIN_SRC
[13, 14, 15, 16, 17, 18, 19]
#+END_SRC
#+HTML: </details>
:end:

If you wrap a comprehension in square brackets, it will be a list comprehension. If you wrap it in parentheses, or leave it unwrapped, it will be a generator expression. If you wrap it in curly braces, you can make a set comprehension, and if you wrap it in curly braces and use a colon in the expression at the beginning of the comprehension, you can make a dictionary comprehension.

Personally, I find that while these comprehensions are very cool if they're short and simple, they tend to get horrid if you let it get out of hand. You can wind up putting a lot of information on one line, and that can be tricky to read.
