#+TITLE: Lesson 2: Collections
#+PROPERTY: header-args :results raw verbatim output :post output_drawer(data=*this*) :noweb strip-export

#+NAME: output_drawer
#+BEGIN_SRC shell :var data="" :exports none :results silent :results output :post
echo ':results:'
echo '#+HTML: <details>'
echo '#+HTML: <summary>Output</summary>'
echo '#+BEGIN_SRC'
echo -n "$data"
echo '#+END_SRC'
echo '#+HTML: </details>'
echo ':end:'
#+END_SRC

#+NAME: session_output_drawer
#+BEGIN_SRC shell :var data="" :exports none :results silent :results output :post
echo ':results:'
echo '#+HTML: <details>'
echo '#+HTML: <summary>Output</summary>'
echo '#+BEGIN_SRC'
echo "$data"
echo '#+END_SRC'
echo '#+HTML: </details>'
echo ':end:'
#+END_SRC

So far we've mostly talked about simple types that represent a single object. Sometimes we want to represent an object which contains several other objects. There are many container types. We'll go over some of the important ones here.

* Lists
A list is an ordered collection, where items are accessed by their position in the list. In Python, we can create a list using square brackets, wrapped around a comma separated list of expressions. These expressions will be evaluated and placed in the list.

#+BEGIN_SRC python :exports both
# `chr` function converts an ascii code to a character
grades = [chr(65), "B", "C", "D", "F"]

print(grades)
#+END_SRC

#+RESULTS:
:results:
#+HTML: <details>
#+HTML: <summary>Output</summary>
#+BEGIN_SRC
['A', 'B', 'C', 'D', 'F']
#+END_SRC
#+HTML: </details>
:end:

One can also access elements of a list using square brackets. To do this, name the list, then put an expression that evaluates to the index of the element of the list that you wish to access inside some square brackets to the right of the list name.

#+BEGIN_SRC python :exports both
grades = ["A", "B", "C", "D", "F"]

print("The first grade in the list is: " + grades[0])
#+END_SRC

#+RESULTS:
:results:
#+HTML: <details>
#+HTML: <summary>Output</summary>
#+BEGIN_SRC
The first grade in the list is: A
#+END_SRC
#+HTML: </details>
:end:
Notice that index 0 refers to the first element of the list. In a programming context, 0 is usually considered the first number. In many contexts, this "zero indexing" is actually useful, and allows one to write neater code. Sometimes, however, you will forget that lists start with index 0, and this will result in a bug - everyone does it. If you make a mistake while writing code, it is likely a mistake everyone who has written code for a comparable amount of time has made. If everyone has made that mistake, it doesn't make you stupid to commit it. On the other hand, if you make a mistake no one else has ever made, you are probably a genius and should be given a medal.

** Iterating Through Lists
Consider the following snippet:

#+BEGIN_SRC python :exports both
grades = ["A", "B", "C", "D", "F"]
# Indices: 0,   1,   2,   3,   4
# Note that there are 5 elements in the list

print("The possible grades in a standard US classroom are:")

current_index = 0

# The `len` function takes a list, and returns the number of items in said list
while current_index < len(grades):
    # We only want commas before every item but the first
    if current_index > 0:
        # Adding `end=""` to the arguments of a print statement stops it printing a newline after whatever you print.
        print(", ", end="")
    print(grades[current_index], end="")

    current_index = current_index + 1
print("!")
#+END_SRC

#+RESULTS:
:results:
#+HTML: <details>
#+HTML: <summary>Output</summary>
#+BEGIN_SRC
The possible grades in a standard US classroom are:
A, B, C, D, F!
#+END_SRC
#+HTML: </details>
:end:

Zero indexing allows us to use the ~<~ operator with the length of the list to make sure that a value is a valid index.

We often find ourselves going through every item in a list like the above. As fun as writing that little counter was, in general, writing less code is better, so Python provides a shortcut:

#+BEGIN_SRC python :exports both
grades = ["A", "B", "C", "D", "F"]
# Indices: 0,   1,   2,   3,   4
# Note that there are 5 elements in the list

print("The possible grades in a standard US classroom are:")

for grade in grades:
    if grade != "A":
        # Adding `end=""` to the arguments of a print statement stops it printing a newline after whatever you print.
        print(", ", end="")
    print(grade, end="")
print("!")
#+END_SRC

#+RESULTS:
:results:
#+HTML: <details>
#+HTML: <summary>Output</summary>
#+BEGIN_SRC
The possible grades in a standard US classroom are:
A, B, C, D, F!
#+END_SRC
#+HTML: </details>
:end:

A for loop is a statement that can be used to replace while loops when you want to iterate through each value in a collection. A for loop has the ~for~ keyword, a name used to refer to the items in the collection, the ~in~ keyword, a collection expression, a colon, and a code block. For each item in the collection, the name is assigned to that item's value, and the code block is run. The name used to refer to the collection items can be used within the code block. For loops are also called "for each" loops - reading the ~for~ keyword as "for each" may make more sense to you. Look at the code above again and give it a try!

** Useful List Operations
We can also use the ~in~ keyword as a question. For example:

#+BEGIN_SRC python :exports both
student_grade = "B"
# ... later ...
passing_grades = ["A", "B", "C"]
if student_grade in passing_grades:
    print("Pass!")
else:
    print("Alas...")
#+END_SRC

#+RESULTS:
:results:
#+HTML: <details>
#+HTML: <summary>Output</summary>
#+BEGIN_SRC
Pass!
#+END_SRC
#+HTML: </details>
:end:

~in~ is being used as an operator that returns as a boolean whether the operand on the right is an item of the operand on the left.

If there's something we think we should be able to turn into a list, we can try it using the ~list~ function. For example:

#+BEGIN_SRC python :exports both
digits = range(10)
# The range function creates a "generator"
# In this case the generator will generate numbers starting with zero, counting up to ten, ignoring ten itself
# Zero indexing again - note how that makes ten numbers!
# We'll talk more about generators later
list_of_digits = list(digits)
print(list_of_digits)
#+END_SRC

#+RESULTS:
:results:
#+HTML: <details>
#+HTML: <summary>Output</summary>
#+BEGIN_SRC
[0, 1, 2, 3, 4, 5, 6, 7, 8, 9]
#+END_SRC
#+HTML: </details>
:end:

Let's say we want to change a list. We can do that! Probably the most useful thing we can do to a list is to add something to it, using the ~.append(item)~ operation, like so:

#+BEGIN_SRC python :exports both
grades = [] # an empty list!

# Alright, this gets a bit dense
# We're iterating through each number below 6, starting at zero
for i in list(range(6)):
    # For each number, add 65 to it ...
    # Convert the resulting number to a character code ...
    # Then add the resulting character to our list of grades
    grades.append(chr(65 + i))

print(grades)
#+END_SRC

#+RESULTS:
:results:
#+HTML: <details>
#+HTML: <summary>Output</summary>
#+BEGIN_SRC
['A', 'B', 'C', 'D', 'E', 'F']
#+END_SRC
#+HTML: </details>
:end:

#+BEGIN_SRC python :exports both
# Mostly the same ...
grades = []

for i in list(range(6)):
    grades.append(chr(65 + i))

# But here's the twist:
grades.remove("E")
print(grades)
#+END_SRC

#+RESULTS:
:results:
#+HTML: <details>
#+HTML: <summary>Output</summary>
#+BEGIN_SRC
['A', 'B', 'C', 'D', 'F']
#+END_SRC
#+HTML: </details>
:end:

That's better! Now let's say we're writing this code for multiple schools. One of those schools has some educational philosophy that doesn't believe in failure. As a result, they would like to remove the lowest grade, F, from the list of possible grades. We can do that with ~.pop()~, like so:

#+BEGIN_SRC python :exports both
failure_is_not_an_option = True
# ...
# Still mostly the same ...
grades = []

for i in list(range(6)):
    grades.append(chr(65 + i))

grades.remove("E")

# But now, the twist is over here:
if failure_is_not_an_option:
    grades.pop()

print(grades)
#+END_SRC

#+RESULTS:
:results:
#+HTML: <details>
#+HTML: <summary>Output</summary>
#+BEGIN_SRC
['A', 'B', 'C', 'D']
#+END_SRC
#+HTML: </details>
:end:

Lovely. Now we're taking on another client! This school has a different philosophy. They believe that students will work harder if they don't get As, so it's best to just not let them. We can use ~.pop(index)~ to remove an item at a particular index of a list:

#+BEGIN_SRC python :exports both
failure_is_not_an_option = False
success_is_not_an_option = True
# ...
# Still mostly the same ...
grades = []

for i in list(range(6)):
    grades.append(chr(65 + i))

grades.remove("E")

# But now, the twist is over here:
if failure_is_not_an_option:
    grades.pop()
if success_is_not_an_option:
    grades.pop(0) # Zero indexing! The "zeroth" element is the first

print(grades)
#+END_SRC

#+RESULTS:
:results:
#+HTML: <details>
#+HTML: <summary>Output</summary>
#+BEGIN_SRC
['B', 'C', 'D', 'F']
#+END_SRC
#+HTML: </details>
:end:

Actually, I'd rather not work for these people. Time to move on.

*** Making New Lists Out of Old Lists
Well, that was sort of a lie. The first thing we're going to do is not actually make a new list, just peer at a piece of the old list - a slice of it! In Python, we can access a subset of the elements of a list with colons and brackets. This is called a slice. A slice has up to three parts: a start, an end, and a step size. Here are a couple slices:

#+BEGIN_SRC python :exports both
# Of course we need a list to slice!
digits = list(range(10))

print("All of em:              ", digits)

# Specifying a start and nothing else
print("All but the first:      ", digits[1:])

# Specifying an end and nothing else
print("Under fives:            ", digits[:5])

# Specifying a step size and nothing else
print("Evens:                  ", digits[::2])

# Indices can also be negative, which means you count backwards from the end
print("Without the last:       ", digits[:-1])

# The step size can also be negative!
print("Backwards odds:         ", digits[::-2])

# We can specify both a start and an end
print("Without first or last:  ", digits[1:-1])

# Or any combination of the parts of a slice - including all three!
print("Backwards evens above 2:", digits[-2:2:-2])
#+END_SRC

#+RESULTS:
:results:
#+HTML: <details>
#+HTML: <summary>Output</summary>
#+BEGIN_SRC
All of em:               [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]
All but the first:       [1, 2, 3, 4, 5, 6, 7, 8, 9]
Under fives:             [0, 1, 2, 3, 4]
Evens:                   [0, 2, 4, 6, 8]
Without the last:        [0, 1, 2, 3, 4, 5, 6, 7, 8]
Backwards odds:          [9, 7, 5, 3, 1]
Without first or last:   [1, 2, 3, 4, 5, 6, 7, 8]
Backwards evens above 2: [8, 6, 4]
#+END_SRC
#+HTML: </details>
:end:

Slices don't really create a new list; they just represent a piece of an already existing list. This means if you modify a slice, you modify the original list. For example:

#+BEGIN_SRC python :exports both
digits = list(range(10))

digits[::2] = ["EVEN", "EVEN", "EVEN", "EVEN", "EVEN"]

print(digits)
#+END_SRC

#+RESULTS:
:results:
#+HTML: <details>
#+HTML: <summary>Output</summary>
#+BEGIN_SRC
['EVEN', 1, 'EVEN', 3, 'EVEN', 5, 'EVEN', 7, 'EVEN', 9]
#+END_SRC
#+HTML: </details>
:end:

We can create a real new list by a couple methods. One is what are called list comprehensions:

#+BEGIN_SRC python :exports both
digits = list(range(10))

teens = [10 + digit for digit in digits]

print(teens)
#+END_SRC

#+RESULTS:
:results:
#+HTML: <details>
#+HTML: <summary>Output</summary>
#+BEGIN_SRC
[10, 11, 12, 13, 14, 15, 16, 17, 18, 19]
#+END_SRC
#+HTML: </details>
:end:

Yet another way to use ~for~ and ~in~! A list comprehension is, in brackets, an expression which may use a new variable name, the for keyword, that new variable name, the in keyword, and the collection that we are creating a modified copy of. For each item in that collection, it sets the variable name to that thing, applies the expression to it, and sets the next item of the resulting list to that.

We can also filter items of the collection we're using to seed our new list, using the ~if~ keyword, and a boolean expression that uses our variable name:

#+BEGIN_SRC python :exports both
digits = list(range(10))

teens = [10 + digit for digit in digits if digit > 2]

print(teens)
#+END_SRC

#+RESULTS:
:results:
#+HTML: <details>
#+HTML: <summary>Output</summary>
#+BEGIN_SRC
[13, 14, 15, 16, 17, 18, 19]
#+END_SRC
#+HTML: </details>
:end:

Personally, I find that while these list comprehensions are very cool if they're short and simple, they tend to get horrid if you let it get out of hand. You can wind up putting a lot of information on one line, and that can be tricky to read.
