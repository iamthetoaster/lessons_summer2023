#+TITLE: Lesson 1: The Basic Basics
#+PROPERTY: header-args :results raw verbatim output :post output_drawer(data=*this*) :noweb strip-export

#+NAME: output_drawer
#+BEGIN_SRC shell :var data="" :exports none :results silent :results output :post
echo ':results:'
echo '#+HTML: <details>'
echo '#+HTML: <summary>Output</summary>'
echo '#+BEGIN_SRC'
echo -n "$data"
echo '#+END_SRC'
echo '#+HTML: </details>'
echo ':end:'
#+END_SRC

#+NAME: session_output_drawer
#+BEGIN_SRC shell :var data="" :exports none :results silent :results output :post
echo ':results:'
echo '#+HTML: <details>'
echo '#+HTML: <summary>Output</summary>'
echo '#+BEGIN_SRC'
echo "$data"
echo '#+END_SRC'
echo '#+HTML: </details>'
echo ':end:'
#+END_SRC



We'll start with some basic language features, which you are likely to use in almost any program you write.

* The Types of Segments of Code
** Statements
A statement, in programming, is a line of code that alters the state of the world. You have already written a statement:
#+BEGIN_SRC python :exports both
print("Hello World!")
#+END_SRC

#+RESULTS:
:results:
#+HTML: <details>
#+HTML: <summary>Output</summary>
#+BEGIN_SRC
Hello World!
#+END_SRC
#+HTML: </details>
:end:

This alters the state of the world by sticking information into the standard output. You will learn about more sorts of useful statements in this lesson.

The following statement, as we will see, is also an expression. It waits for the user to type some data into the terminal:
#+NAME: fake-input
#+BEGIN_SRC python :exports none
def input(prompt):
    print(prompt + "Harold")
    return "Harold"
#+END_SRC

#+RESULTS: fake-input
:results:
#+HTML: <details>
#+HTML: <summary>Output</summary>
#+BEGIN_SRC
#+END_SRC
#+HTML: </details>
:end:

#+BEGIN_SRC python :exports both
<<fake-input>>
input("Enter your name: ")
#+END_SRC

#+RESULTS:
:results:
#+HTML: <details>
#+HTML: <summary>Output</summary>
#+BEGIN_SRC
Enter your name: Harold
#+END_SRC
#+HTML: </details>
:end:

If you entered this line into the interactive interpreter, you will see one more line of output:
#+BEGIN_SRC output :post :eval never
'Harold'
#+END_SRC

This is because the input statement is also an expression. Continue for more information on expressions.

** Expressions
An expression is something that evaluates to a value. You have already written a simple expression inside the statement above:
#+BEGIN_SRC python :results value :session :post session_output_drawer(data=*this*)
"Hello World!"
#+END_SRC

#+RESULTS:
:results:
#+HTML: <details>
#+HTML: <summary>Output</summary>
#+BEGIN_SRC
Hello World!
#+END_SRC
#+HTML: </details>
:end:
Any value in Python is itself a simple sort of expression that evaluates to itself.

If you did the section on using the interactive interpreter in lesson 0, then you have written a more complicated expression:
#+BEGIN_SRC python :exports both :results value :session :post session_output_drawer(data=*this*)
1 + 2 * 3 - 4
#+END_SRC

#+RESULTS:
:results:
#+HTML: <details>
#+HTML: <summary>Output</summary>
#+BEGIN_SRC
3
#+END_SRC
#+HTML: </details>
:end:

This expression is actually composed of several expressions! The expression ~1 + 2 * 3 - 4~ is composed of the expression ~1 + 2 * 3~, the operator ~-~, and the expression ~4~. Likewise, the expression ~1 + 2 * 3~ is itself composed of the expression ~1~, the operator ~+~, and the expression ~2 * 3~.

This recursive evaluation of expressions is a really powerful tool!
** Comments
A comment is a ~#~, typically called a "hash," and anything on the line after it. Comments are ignored by the Python interpreter. Comments are used to explain why your code is the way it is. They are also sometimes used to block sections of code from being run, without deleting them.
#+BEGIN_SRC python
# The following code should not run:
# print("If you see this message, be worried")
#+END_SRC
If you did the section of lesson zero on running an executable script, this may look familiar to you! A shebang is a special sort of comment. While it is not read by Python, the operating system does read it, and uses it to figure out how to run the script in that file.

* Basic Units of Functionality
** Variables
A variable is a name associated with some data. To create a variable in Python, you write a statement, composed of the variable's name, an equals sign, and an expression. Let's try it in the interpreter:
#+BEGIN_SRC python :session variables :results value :post session_output_drawer(data=*this*)
var = 1
#+END_SRC

#+RESULTS:
:results:
#+HTML: <details>
#+HTML: <summary>Output</summary>
#+BEGIN_SRC

#+END_SRC
#+HTML: </details>
:end:

Note that this should not output anything, as it is a statement, and not one that prints. After you create a variable, its name becomes an expression:
#+BEGIN_SRC python :exports both :session variables :results value :post session_output_drawer(data=*this*)
var
#+END_SRC

#+RESULTS:
:results:
#+HTML: <details>
#+HTML: <summary>Output</summary>
#+BEGIN_SRC
1
#+END_SRC
#+HTML: </details>
:end:

You can use that expression in more complex expressions:
#+BEGIN_SRC python :exports both :session variables :results value :post session_output_drawer(data=*this*)
var + 10
#+END_SRC

#+RESULTS:
:results:
#+HTML: <details>
#+HTML: <summary>Output</summary>
#+BEGIN_SRC
11
#+END_SRC
#+HTML: </details>
:end:

You can use those expressions in variable declarations:
#+BEGIN_SRC python :session variables :results value :post session_output_drawer(data=*this*)
var2 = var + 10
#+END_SRC

#+RESULTS:
:results:
#+HTML: <details>
#+HTML: <summary>Output</summary>
#+BEGIN_SRC

#+END_SRC
#+HTML: </details>
:end:

...and so on and so on.

You can also change the contents of a variable, the same way you created it:

#+BEGIN_SRC python :session variables :exports both :results value :post session_output_drawer(data=*this*)
var2 = var2 - 2 * var
var2
#+END_SRC

#+RESULTS:
:results:
#+HTML: <details>
#+HTML: <summary>Output</summary>
#+BEGIN_SRC
9
#+END_SRC
#+HTML: </details>
:end:

This next part will work in the interactive interpreter, or outside of it.

Remember how I mentioned that input statement was also an expression? Let's try using it in a variable.
#+BEGIN_SRC python :exports both
<<fake-input>>
name = input("What is your name? ")
print(name)
#+END_SRC

#+RESULTS:
:results:
#+HTML: <details>
#+HTML: <summary>Output</summary>
#+BEGIN_SRC
What is your name? Harold
Harold
#+END_SRC
#+HTML: </details>
:end:
The input expression evaluates to the value the user typed in. This will come in handy when we want to make interactive programs!

Data comes in different types, which have work in different kinds of expressions.
#+BEGIN_SRC python :exports both
number = 10               # number is an integer, or whole number
number = 20.0             # number is a float, short for floating point, or decimal number
print(number - 5)         # Both number types can be used with the usual math operations
word = "Thirty"           # word is a string
print(word + " thousand") # Using the + sign with strings concatenates, or combines them
li = [40, 41, 42, 43]     # li is a list
print(li[2])              # Using the bracket operator with lists accesses elements within them
condition = False         # condition is a boolean, or True or False value
print(condition or True)  # booleans can be used with logical operators 'and' and 'or'
#+END_SRC

#+RESULTS:
:results:
#+HTML: <details>
#+HTML: <summary>Output</summary>
#+BEGIN_SRC
15.0
Thirty thousand
42
True
#+END_SRC
#+HTML: </details>
:end:

** Control Flow Statements
Most of the time when code runs, it does so one line at a time. We can imagine a spider scuttling down your script, setting off each line it steps on. The path this creature takes is called control flow.

Ordinarily, control flow only goes down. Sometimes, however, we want control flow to run down different paths in different circumstances. There are special statements which can alter control flow, called control flow statements.

*** If Statements
An if statement splits control flow in two. After the if statement has finished, that split is rejoined. An if statement is composed of the ~if~ keyword, a condition expression (one that evaluates to a boolean), a colon, a code block, the ~else~ keyword, a colon, and another code block. An example follows:
#+BEGIN_SRC python :exports both
if 2 + 2 == 4:
    print("All is well!")
else:
    print("Uh oh.")
    print("Something has gone terribly wrong...")
#+END_SRC

#+RESULTS:
:results:
#+HTML: <details>
#+HTML: <summary>Output</summary>
#+BEGIN_SRC
All is well!
#+END_SRC
#+HTML: </details>
:end:

There are a couple points of interest here.

First, the double equals sign. In most programming languages, ~=~ is a statement, whereas ~==~ is a question. ~color = 'red'~ means "color is 'red'!" ~color == 'red'~ means "color is 'red'?"

Second, the code blocks. In Python, you form a code block by indenting several contiguous lines of statements such that they begin the same distance from the left. Use the tab key to insert whitespace which can be used to indent lines of code. Most editors will automatically insert whitespace when you make a new line so that you may continue a code block.

That's interesting - an if statement is a statement composed of statements! That means we can put an if statement inside another if statement.

#+BEGIN_SRC python :exports both
if 2 + 2 != 5:
    print("Things are looking good so far!")
    if 2 + 2 == 3:
        print("Aw hell.")
    else:
        print("Still fine!")
else:
    print("Well that isn't right...")
#+END_SRC

#+RESULTS:
:results:
#+HTML: <details>
#+HTML: <summary>Output</summary>
#+BEGIN_SRC
Things are looking good so far
Still fine!
#+END_SRC
#+HTML: </details>
:end:

Note that in Python, and many other programming languages, ~!~ means not. We can project from that that ~!=~ means "is not", or "doesn't equal."

Sometimes we don't really want to do anything in the ~else~ block. There are two ways to make that happen: the bad way, and the good way.

First, the bad way. The ~pass~ statement is a special statement that doesn't do anything. Sometimes this is useful when you haven't decided what a block of code should do yet, but you need to have it.

#+BEGIN_SRC python
<<fake-input>>
name = input("What is your name? ")

if name == "Guido Van Rossum":
    print("Greetings, Benevolent Dictator for Life!")
    print("Oh wait, you were overthrown by a walrus.")
else:
    pass
#+END_SRC

#+RESULTS:
:results:
#+HTML: <details>
#+HTML: <summary>Output</summary>
#+BEGIN_SRC
What is your name? Harold
#+END_SRC
#+HTML: </details>
:end:

It's nice to know about the ~pass~ keyword, but this method is rarely the best option. As it turns out, we can also just elide the last two lines:

#+BEGIN_SRC python
<<fake-input>>
name = input("What is your name? ")

if name == "Guido Van Rossum":
    print("Greetings, Benevolent Dictator for Life!")
    print("Oh wait, you were overthrown by a walrus.")
#+END_SRC

#+RESULTS:
:results:
#+HTML: <details>
#+HTML: <summary>Output</summary>
#+BEGIN_SRC
What is your name? Harold
#+END_SRC
#+HTML: </details>
:end:

That's a little more clean.

You can also add an optional ~elif~ block to an if statement, between the first ~if~ block and the ~else~ block, if it exists. ~elif~ is short for else if. The ~elif~ block executes only if no previous block in the if statement executes, and if a given condition evaluates to ~True~. The following example should make some more sense of this:


#+BEGIN_SRC python :exports both
number = 2 + 2
if number == 4:
    print("All's well!")
elif number == 3 or number == 5:
    print("Classic off by one error.")
else:
    print("Something is wrong and I don't understand it...")
#+END_SRC

#+RESULTS:
:results:
#+HTML: <details>
#+HTML: <summary>Output</summary>
#+BEGIN_SRC
All's well!
#+END_SRC
#+HTML: </details>
:end:

If statments are not loops. Whenever I hear the term "if loop" my lifespan decreases by two minutes.

*** While Statements
While statements are kind of like repeated if statements (without the else.) A while statement is composed of the ~while~ keyword, a condition, a colon, and a code block. When control flow reaches a while statement, it checks if the condition expression evaluates to true. If it is true, it enters the while statement, executes the body of the while statement, and then jumps back to directly before the while statement, so that it can check the condition again. If the condition evaluates to false, it skips the while statement. Here is an example:

#+BEGIN_SRC python :exports both
count = 0
while count < 10:
    print(count)
    count = count + 1
#+END_SRC

#+RESULTS:
:results:
#+HTML: <details>
#+HTML: <summary>Output</summary>
#+BEGIN_SRC
0
1
2
3
4
5
6
7
8
9
#+END_SRC
#+HTML: </details>
:end:

While statements can be used with user input to create an interactive program.

#+NAME: fake-inputs
#+BEGIN_SRC python :exports none
def input(prompt):
    inputs = ["Not yet", "Momentarily", "QUIT"]
    result = inputs[input.counter]
    input.counter = (input.counter + 1) % len(inputs)
    print(prompt + result)
    return result
input.counter = 0
#+END_SRC

#+RESULTS: fake-inputs
:results:
#+HTML: <details>
#+HTML: <summary>Output</summary>
#+BEGIN_SRC
#+END_SRC
#+HTML: </details>
:end:


#+BEGIN_SRC python :exports both
<<fake-inputs>>
user_input = ""
while user_input != "QUIT":
    user_input = input("Type 'QUIT' to quit: ")
#+END_SRC

#+RESULTS:
:results:
#+HTML: <details>
#+HTML: <summary>Output</summary>
#+BEGIN_SRC
Type 'QUIT' to quit: Not yet
Type 'QUIT' to quit: Momentarily
Type 'QUIT' to quit: QUIT
#+END_SRC
#+HTML: </details>
:end:

While statements are also called while loops, because they can loop a piece of code over and over. Both are correct!

Usually loops terminate when control flow reaches the top of the loop and the condition evaluates to false. There is, however, another way to exit a loop! The ~break~ keyword causes control flow to immediately exit a loop containing it. We can re-structure the above code to use the break statement:

#+BEGIN_SRC python :exports both
<<fake-inputs>>
user_input = ""
while True:
    user_input = input("Type 'QUIT' to quit: ")
    if user_input == "QUIT":
        break
#+END_SRC

Note the ~while True~. Without a break statement, that loop will continue forever.

*** Visualizing Control Flow
We can diagram control flow using a chart. These "flow charts" are used all the time to describe instructions for humans! Consider the following simple piece of code:

#+BEGIN_SRC python :results silent
line_1
line_2
line_2
#+END_SRC

That code is equivalent to the following flow chart:

#+NAME: dot-style
#+BEGIN_SRC dot :exports none :results none silent :post
bgcolor="transparent"
rankdir="LR"
node [color="#cdd6f4", regular=true, fontcolor="#11111b", fontname="sans-serif", fillcolor="#89b4fa", style="filled" shape="oval"]
edge [color="#cdd6f4", fontcolor="#cdd6f4", fontname="sans-serif", arrowhead="normalnone"]
#+END_SRC

#+BEGIN_SRC dot :file ./images/simple_flow.svg :exports results :cmdline -T svg :results file :post
strict digraph {
  <<dot-style>>
  line_1 -> line_2
  line_2 -> line_3
}
#+END_SRC

#+RESULTS:
[[file:./images/simple_flow.svg]]

Not very exciting. An if statement is more interesting. Consider the following code:

#+BEGIN_SRC python :results silent
if condition:
    this_case
else:
    that_case
afterwards
#+END_SRC

In flow chart form:

#+BEGIN_SRC dot :file ./images/if_flow.svg :exports results :cmdline -T svg :results file :post
strict digraph {
  <<dot-style>>
  "if condition" [shape="diamond", fillcolor="#f38ba8"]
  "if condition" -> this_case [label="True"]
  "if condition" -> that_case [label="False"]
  {this_case that_case} -> afterwards
}
#+END_SRC

#+RESULTS:
[[file:./images/if_flow.svg]]

While loops are also pretty exciting. Again, consider the following code:

#+BEGIN_SRC python :results silent
while condition:
    in_loop
afterwards
#+END_SRC

As a flow chart:

#+BEGIN_SRC dot :file ./images/while_flow.svg :exports results :cmdline -T svg :results file :post
strict digraph {
  <<dot-style>>
  while [shape="diamond", fillcolor="#f38ba8", label="while condition"]
  while -> in_loop [label="True"]
  in_loop -> while
  while -> afterwards [label="False"]
  in_loop -> afterwards [style="invis"]
}
#+END_SRC

#+RESULTS:
[[file:./images/while_flow.svg]]

If you find looking at this easier than looking at pieces of code, try drawing out flow charts yourself! Drawing is one of the most useful tools in a programmer's arsenal.

** Functions
The most valuable resource a programmer manages is cognitive load. (Certainly not computer performance - always remember, programmer time is worth more than computer time!) The more stuff you are looking at, the more brain power it takes to understand it. Functions are a way to reduce how much stuff you are looking at at a time. They package many pieces of code into one, which says what those pieces of code are for.
*** Using Functions
You have already used functions! To use a function, you write its name, followed by parentheses, containing any expressions that evaluate to information we want to pass the function. These expressions are called arguments.

#+BEGIN_SRC python :exports both
<<fake-inputs>>
input("Are you a Python expert? ")
print("Not yet! But you can be!")
#+END_SRC

#+RESULTS:
:results:
#+HTML: <details>
#+HTML: <summary>Output</summary>
#+BEGIN_SRC
Are you a Python expert? Not yet
Not yet! But you can be!
#+END_SRC
#+HTML: </details>
:end:

These functions are being used as statements. You can also use some functions as expressions!

#+NAME: fake-number-inputs
#+BEGIN_SRC python :exports none
def input(prompt):
    inputs = ["10", "20", "30"]
    result = inputs[input.counter]
    input.counter = (input.counter + 1) % len(inputs)
    print(prompt + result)
    return result
input.counter = 0
#+END_SRC

#+RESULTS: fake-number-inputs
:results:
#+HTML: <details>
#+HTML: <summary>Output</summary>
#+BEGIN_SRC
#+END_SRC
#+HTML: </details>
:end:

#+BEGIN_SRC python :exports both
<<fake-number-inputs>>
string_number = input("Enter a number: ")
# We can't really do math with our number yet
print(string_number + "10")

# Let's use a function to convert it to an integer!
whole_number = int(string_number)
print(whole_number + 10)

# We can also turn it into a decimal, or floating point number
decimal_number = float(whole_number)
print(decimal_number * 3)

# Or back into a string!
string_decimal = str(decimal_number)

print("Your number was " + string_decimal)
#+END_SRC

#+RESULTS:
:results:
#+HTML: <details>
#+HTML: <summary>Output</summary>
#+BEGIN_SRC
Enter a number: 10
1010
20
30.0
Your number was 10.0
#+END_SRC
#+HTML: </details>
:end:

Functions can take more than one argument. Separate arguments with commas:

#+BEGIN_SRC python :exports both
<<fake-number-inputs>>
first  = input("Enter a number: ")
second = input("Enter a number: ")
print("The smaller number was " + min(first, second))

third  = input("Enter one last number: ")
print("The largest number was " + max(first, second, third))
#+END_SRC

#+RESULTS:
:results:
#+HTML: <details>
#+HTML: <summary>Output</summary>
#+BEGIN_SRC
Enter a number: 10
Enter a number: 20
The smaller number was 10
Enter one last number: 30
The largest number was 30
#+END_SRC
#+HTML: </details>
:end:

Some functions, like ~min~ and ~max~, can take lots of different numbers of arguments, but most have a specific number they accept.

#+BEGIN_SRC python :exports both
import math # This statement "imports" symbols from a library
            # To use those symbols we use the name of the library and a dot
print(math.sqrt(100))
# The following would error out
# print(math.sqrt(200, 300))
#+END_SRC

#+RESULTS:
:results:
#+HTML: <details>
#+HTML: <summary>Output</summary>
#+BEGIN_SRC
10.0
#+END_SRC
#+HTML: </details>
:end:

*** Defining Your Own Functions
Other people's functions are great, but sometimes we want to define our own. To define a function, we must use the ~def~ keyword, the name of the function, parentheses containing a list of named pieces of information the function will want, called parameters, a colon, and a code block called the function body. After the function has been defined, it can be used.

#+BEGIN_SRC python :exports both
def print_sum_of_squares(a, b):
    # Python has a power operator, `**`
    # The following reads: "a squared is a to the power of two"
    a_squared = a ** 2
    b_squared = b ** 2

    print (a_squared + b_squared)

print_sum_of_squares(3, 4)
#+END_SRC

#+RESULTS:
:results:
#+HTML: <details>
#+HTML: <summary>Output</summary>
#+BEGIN_SRC
25
#+END_SRC
#+HTML: </details>
:end:

The words "parameter" and "argument" are often used interchangeably. Technically, the argument is the actual expression passed into a function when that function is called, whereas a parameter is a name in the function's definition that will be set to the argument at the time the function is called. If you do not remember this, it will be ok. Most people do not.

The above function is pretty good, but we can do better. Remember that functions exist to reduce how much we have to think. A good function does one "thing", so that we don't have to think about the different "things" it is doing - if you see the word "and" in a function name, it might make more sense as two functions. Let's simplify the above code.

To make a function that may be used as an expression, use the ~return~ keyword within the function. When control flow reaches the ~return~ keyword within a function, it leaves the function immediately, and the expression that called the function evaluates to the expression that was returned.

#+BEGIN_SRC python :exports both
def sum_of_squares(a, b):
    a_squared = a ** 2
    b_squared = b ** 2

    return a_squared + b_squared

square_length = sum_of_squares(3, 4)
print(square_length)
#+END_SRC

Note that this way, we can reuse the value calculated by the function! When we print things to the console, the user can see it, but our program cannot necessarily. In general, I prefer to avoid using ~print~ statements within functions, as I consider "printing" or "interacting with the user" to be doing a different "thing" from calculating values or acting on the world.

I use quotation marks around "thing," because what one considers to be a "thing" is subjective. Use your best judgement. Remember that you don't want to think very hard.

At this stage you have all the information you need to write a simple interactive program! Give the [[file:exercises.org::*Number Guesser][Number Guesser]] exercise a try.
